I"’<p>Luego de varios experimentos creando servicios Rest, utilizando tanto el servidor http por defecto como Fasthttp, he visto que hay un par de manderas diferentes de pasar par√°metros a un handler.</p>

<p>¬øCu√°ndo necesitamos eso?</p>

<!--end_excerpt-->

<p>Supongamos que tenemos un servicio Rest que funciona tanto como servidor c√≥mo como cliente. Por ejemplo, un servicio debe responder a las peticiones que recibe en base a hacer llamadas GET a otro servicio.</p>

<p>Un handler normal se definir√≠a como algo as√≠:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">customerAccountsHandler</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</code></pre></div></div>

<p>y ser√≠a llamado as√≠:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">:=</span> <span class="n">mux</span><span class="o">.</span><span class="n">NewRouter</span><span class="p">()</span>
<span class="n">r</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="s">"/customer/accounts"</span><span class="p">)</span><span class="o">.</span><span class="n">Queries</span><span class="p">()</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span>
	<span class="n">options</span><span class="o">.</span><span class="n">customerAccountsHandler</span><span class="p">)</span><span class="o">.</span><span class="n">Methods</span><span class="p">(</span><span class="s">"GET"</span><span class="p">)</span>
</code></pre></div></div>

<p>¬øQu√© ocurre si quiero parametrizar la url del servicio Rest al que debe consultar? ¬øQu√© ocurre si quiero pasarle la conexi√≥n cliente para poder reutilizarla (una buena pr√°ctica en Go)? Pues no puedo. No al menos as√≠ con ese formato est√°ndar.</p>

<p>Una forma, como he mostrado en un art√≠culo anterior, consiste en usar closures.
En la idea es crear una funci√≥n que haga de wrapper y me permita pasar los par√°metros sin dejar de ser un handler. Por ejemplo:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">customerAccountsHandler</span><span class="p">(</span><span class="n">client</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span><span class="p">,</span> <span class="n">backendURL</span> <span class="kt">string</span><span class="p">)</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</code></pre></div></div>

<p>Como vemos en el c√≥digo, mi funci√≥n acepta como par√°metros el cliente y la URL y a√∫n as√≠ sigue devolviendo un handler.</p>

<p>La llamada en ese caso quedar√≠a as√≠:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">:=</span> <span class="n">mux</span><span class="o">.</span><span class="n">NewRouter</span><span class="p">()</span>
	<span class="n">r</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="s">"/customer/accounts"</span><span class="p">)</span><span class="o">.</span><span class="n">Queries</span><span class="p">()</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span>
		<span class="n">customerAccountsHandler</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="s">"http://localhost:9090/accounts"</span><span class="p">))</span><span class="o">.</span><span class="n">Methods</span><span class="p">(</span><span class="s">"GET"</span><span class="p">)</span>
</code></pre></div></div>

<p>Este m√©todo suele ser √∫til, pero tambi√©n puede dar problemas, por ejemplo, al momento de crear los casos de prueba.</p>

<p>En ese caso, otra forma muy √∫til y pr√°ctica es usar interfaces. Por ejemplo, creo una estructura as√≠:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">HandlerOptions</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Client</span>     <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span>
	<span class="n">BackendURL</span> <span class="kt">string</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Luego puedo entonces crear una variable con esa estructura y los datos que necesitar√© pasar como par√°metros:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">options</span> <span class="o">:=</span> <span class="n">HandlerOptions</span><span class="p">{</span>
	<span class="n">Client</span><span class="o">:</span>     <span class="n">client</span><span class="p">,</span>
	<span class="n">BackendURL</span><span class="o">:</span> <span class="s">"http://localhost:9596"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Puedo entonces pedir que mi handler original cumpla con esa interface:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">o</span> <span class="n">HandlerOptions</span><span class="p">)</span> <span class="n">customerAccountsHandler</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> 
</code></pre></div></div>

<p>Y ahora puedo ya pasar los par√°metros en la llamada del handler:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">:=</span> <span class="n">mux</span><span class="o">.</span><span class="n">NewRouter</span><span class="p">()</span>
<span class="n">r</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="s">"/customer/accounts"</span><span class="p">)</span><span class="o">.</span><span class="n">Queries</span><span class="p">()</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span>
	<span class="n">options</span><span class="o">.</span><span class="n">customerAccountsHandler</span><span class="p">)</span><span class="o">.</span><span class="n">Methods</span><span class="p">(</span><span class="s">"GET"</span><span class="p">)</span>
</code></pre></div></div>

<p>De esta forma, el c√≥digo queda m√°s claro y trae menos problemas al momento de realizar tests.</p>

:ET